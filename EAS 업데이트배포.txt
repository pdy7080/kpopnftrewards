# EAS 업데이트를 배포하기 위한 CMD 명령어 순서

시연자에게 이미 앱을 배포한 후, 개선된 앱을 원격으로 업데이트하기 위한 명령어 순서입니다.

## 1. EAS 로그인 확인
```bash
npx eas whoami
```
로그인되어 있지 않다면:
```bash
npx eas login
```

## 2. 코드 변경사항 확인
```bash
git status
```

## 3. 변경사항 커밋 (선택사항이지만 권장)
```bash
git add .
git commit -m "앱 개선: UI 수정 및 버그 수정"
```

## 4. 업데이트 배포
```bash
npx eas update --branch demo --message "4월 4일 업데이트: UI 개선 및 버그 수정"
```

## 5. 업데이트 목록 확인 (선택사항)
```bash
npx eas update:list
```

이 명령어들을 순서대로 실행하면 시연자의 앱이 다음에 실행될 때 자동으로 업데이트됩니다. 시연자는 특별한 조치를 취할 필요가 없으며, 인터넷 연결만 있으면 앱을 열 때 자동으로 최신 버전을 받게 됩니다.

명령어를 실행할 때 KpopNftRewards 프로젝트 폴더 내에서 실행하고 있다면, 프로젝트 이름을 따로 지정하지 않아도 Expo가 자동으로 현재 폴더의 프로젝트를 인식합니다.

하지만 더 명확히 하고 싶다면, 다음과 같이 프로젝트 ID나 이름을 지정할 수 있습니다:

```bash
npx eas update --branch demo --message "4월 4일 업데이트: UI 개선 및 버그 수정" --project KpopNftRewards
```

프로젝트 ID를 사용하는 경우(Expo 대시보드에서 확인 가능):
```bash
npx eas update --branch demo --message "4월 4일 업데이트: UI 개선 및 버그 수정" --id your-project-id
```

일반적으로 KpopNftRewards 폴더 내에서 명령어를 실행하면 추가 지정 없이도 Expo가 올바른 프로젝트를 인식합니다. Expo는 프로젝트 폴더의 app.json 또는 app.config.js 파일을 읽어 필요한 프로젝트 정보를 식별합니다.


# 개선된 앱을 시연자 기기에 원격 업데이트하는 방법

앱을 개선한 후 시연자의 기기에 업데이트를 배포하는 과정을 상세히 설명해 드리겠습니다.

## 1. 업데이트 전 준비사항 확인

먼저 다음 사항을 확인하세요:

- 시연자에게 이미 배포한 앱이 EAS Build를 통해 빌드되었는지 확인
- 앱이 특정 채널(예: "demo" 채널)에 연결되어 있는지 확인
- app.json에 updates 설정이 활성화되어 있는지 확인

## 2. 앱 코드 변경사항 확정

모든 코드 변경이 완료되었는지 확인하세요. Git을 사용하고 있다면:

```bash
# 변경사항 확인
git status

# 변경사항 커밋
git add .
git commit -m "앱 개선: UI 수정 및 버그 수정"
```

## 3. 업데이트 배포

EAS Update를 사용하여 업데이트를 배포합니다:

```bash
# 데모 채널로 업데이트 배포
npx eas update --branch demo --message "4월 4일 업데이트: UI 개선 및 버그 수정"
```

이 명령어는:
1. 최신 코드로 JavaScript 번들을 빌드합니다
2. 이 번들을 Expo 서버에 업로드합니다
3. 시연자의 앱이 이 업데이트를 수신할 수 있도록 설정합니다

## 4. 업데이트 상태 확인

Expo 대시보드(https://expo.dev)에서 업데이트 상태를 확인할 수 있습니다:

1. 프로젝트로 이동
2. "Updates" 탭 선택
3. 가장 최근 업데이트 확인 
4. 상태가 "Published"인지 확인

## 5. 시연자에게 알림

시연자에게 다음과 같이 알려주세요:

1. 앱을 열면 자동으로 업데이트가 다운로드됩니다
2. 업데이트는 앱을 처음 실행할 때 적용됩니다
3. 인터넷 연결이 있어야 업데이트가 다운로드됩니다
4. 보통 앱을 완전히 닫았다가 다시 열면 업데이트가 적용됩니다

## 6. 업데이트 강제 적용 (선택사항)

시연자가 즉시 업데이트를 받도록 하려면, 앱 코드에 강제 업데이트 기능을 추가할 수 있습니다:

```javascript
import * as Updates from 'expo-updates';

// 앱 시작 시 업데이트 확인
async function checkForUpdates() {
  try {
    const update = await Updates.checkForUpdateAsync();
    
    if (update.isAvailable) {
      await Updates.fetchUpdateAsync();
      // 사용자에게 알림 후 재시작
      alert('새 버전이 설치되었습니다. 앱을 재시작합니다.');
      await Updates.reloadAsync();
    }
  } catch (error) {
    console.log('업데이트 확인 중 오류 발생:', error);
  }
}

// 앱 시작 시 함수 호출
useEffect(() => {
  checkForUpdates();
}, []);
```

## 7. 업데이트 확인 방법

시연자의 앱이 실제로 업데이트되었는지 확인하려면:

1. 앱 내에 간단한 버전 표시를 추가하세요:
   ```javascript
   // app.js 또는 홈 화면
   import Constants from 'expo-constants';
   
   // UI에 표시
   <Text>버전: {Constants.manifest.version} (빌드: {Constants.manifest.buildNumber})</Text>
   ```

2. 또는 업데이트를 구분할 수 있는 시각적인 변화를 추가하세요

## 8. 문제 해결

시연자의 앱이 업데이트되지 않는 경우:

1. **인터넷 연결 확인**: 시연자가 안정적인 인터넷에 연결되어 있는지 확인
2. **앱 재시작 확인**: 앱을 완전히 종료하고 다시 시작했는지 확인
3. **채널 확인**: 앱이 올바른 채널(demo)에 연결되어 있는지 확인
4. **수동 강제 업데이트**: 위에서 언급한 코드를 사용하여 업데이트 강제 적용

## 9. 롤백 방법

만약 업데이트에 문제가 있다면, 이전 버전으로 롤백할 수 있습니다:

```bash
# 이전 업데이트 ID 확인
npx eas update:list

# 특정 업데이트로 롤백
npx eas update:republish --id YOUR_UPDATE_ID
```

## 10. 추가 팁

- **작은 변경사항은 자주 업데이트**: 큰 변경보다 작은 변경을 자주 배포하는 것이 안전합니다
- **업데이트 메시지 명확하게**: 각 업데이트의 변경 내용을 명확히 기록하세요
- **테스트 후 배포**: 본인 기기에서 먼저 테스트 후 시연자에게 배포하세요
- **시간대 고려**: 시연자가 앱을 사용하지 않는 시간대에 업데이트하는 것이 좋습니다

이 과정을 통해 시연자는 앱을 재설치하거나 스토어를 통해 업데이트할 필요 없이 항상 최신 버전의 앱을 사용할 수 있습니다. 개발 주기를 빠르게 유지하면서 원격으로 앱을 계속 개선할 수 있는 강력한 방법입니다.